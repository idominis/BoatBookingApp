@page "/"
@page "/boat-booking"
@using Microsoft.EntityFrameworkCore
@using BoatBookingApp.Frontend.Shared.Models
@using BoatBookingApp.Frontend.Shared.Layout
@using MudBlazor
@using System.Threading.Tasks
@using BoatBookingApp.Frontend.Shared.Data
@using BoatBookingApp.Frontend.Shared.Services
@inject IDbContextFactory<BoatBookingContext> DbContextFactory

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h4" GutterBottom="true">Boat Booking</MudText>

    <MudForm @ref="form">
        <MudSelect T="string" Label="Speedboat Name" @bind-Value="booking.BoatName" Required="true" Class="wide-select">
            @foreach (var boat in boats)
            {
                <MudSelectItem Value="@boat.Name">@boat.Name</MudSelectItem>
            }
        </MudSelect>

        <MudSwitch T="bool" @bind-Checked="booking.IsMultiDay" ValueChanged="OnMultiDayChanged"
                   Color="Color.Primary" Label="Multiple Days Rent" Class="my-custom-switch" />

        <MudDatePicker Label="Start Date" @bind-Date="booking.StartDate" Required="true" />
        <MudDatePicker Label="End Date" @bind-Date="booking.EndDate"
                       Disabled="!booking.IsMultiDay" Required="@booking.IsMultiDay" />

        <MudNumericField @bind-Value="booking.PassengerCount" Label="Number of Passengers" Min="1" Required="true" />

        <MudTimePicker Label="Pickup Time" @bind-Time="booking.PickupTime" Required="true" />
        <MudTimePicker Label="Return Time" @bind-Time="booking.ReturnTime" Required="true" />

        <MudSwitch T="bool" @bind-Checked="booking.SkipperRequired" ValueChanged="OnSkipperRequiredChanged"
                   Color="Color.Primary" Label="Skipper Required" Class="my-custom-switch" />
        <MudSwitch T="bool" @bind-Checked="booking.FuelIncluded" ValueChanged="OnFuelIncludedChanged"
                   Color="Color.Primary" Label="Fuel Included" Class="my-custom-switch" />

        <MudSelect T="Extra" Label="Extras" MultiSelection="true" ToStringFunc="@(e => e.Name)"
                   SelectedValues="_selectedExtras" SelectedValuesChanged="OnSelectedExtrasChanged">
            @foreach (var extra in extras)
            {
                <MudSelectItem Value="@extra">@extra.Name</MudSelectItem>
            }
        </MudSelect>

        <MudNumericField @bind-Value="booking.TotalPrice" Label="Total Price" Min="0" Required="true" />
        <MudNumericField @bind-Value="booking.DepositPaid" Label="Deposit Paid" Min="0" Required="true" />

        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(form == null || !form.IsValid)" OnClick="Submit" Class="mt-4">Send Booking</MudButton>
    </MudForm>
</MudContainer>

@code {
    [Inject]
    public ISnackbar Snackbar { get; set; }
    [Inject]
    public BookerStateService BookerState { get; set; }

    private MudForm? form;
    private BoatBooking booking = new BoatBooking
        {
            StartDate = DateTime.Today,
            EndDate = DateTime.Today,
            IsMultiDay = false,
            BookingExtras = new List<BookingExtra>()
        };
    private List<Boat> boats = new List<Boat>();
    private List<Extra> extras = new List<Extra>();
    private IEnumerable<Extra> _selectedExtras = new List<Extra>();

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = DbContextFactory.CreateDbContext();
        boats = await dbContext.Boats.ToListAsync();
        extras = await dbContext.Extras.ToListAsync();
    }

    private void OnSelectedExtrasChanged(IEnumerable<Extra> newValue)
    {
        _selectedExtras = newValue;
        booking.BookingExtras = newValue.Select(e => new BookingExtra { ExtraId = e.Id, Extra = e }).ToList();
    }

    private void OnMultiDayChanged(bool value)
    {
        booking.IsMultiDay = value;
        StateHasChanged();
    }

    private void OnSkipperRequiredChanged(bool value)
    {
        booking.SkipperRequired = value;
        Console.WriteLine($"SkipperRequired changed to: {value}");
    }

    private void OnFuelIncludedChanged(bool value)
    {
        booking.FuelIncluded = value;
        Console.WriteLine($"FuelIncluded changed to: {value}");
    }

    private async Task Submit()
    {
        try
        {
            using var dbContext = DbContextFactory.CreateDbContext();
            var selectedBooker = await dbContext.Bookers
                .FirstOrDefaultAsync(b => b.ShortName == BookerState.SelectedBookerShortName);
            if (selectedBooker != null)
            {
                booking.BookerId = selectedBooker.Id;
            }

            dbContext.Bookings.Add(booking);
            await dbContext.SaveChangesAsync();
            Snackbar.Add("Sent Successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Sent Error: {ex.Message}", Severity.Error);
        }
    }
}

<style>
    .wide-select {
        width: 300px;
    }

        .wide-select .mud-input-control {
            width: 300px;
        }
</style>