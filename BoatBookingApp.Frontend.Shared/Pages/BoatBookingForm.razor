@page "/"
@page "/boat-booking"
@using Microsoft.EntityFrameworkCore
@using BoatBookingApp.Frontend.Shared.Models
@using BoatBookingApp.Frontend.Shared.Layout
@using MudBlazor
@using System.Threading.Tasks
@using BoatBookingApp.Frontend.Shared.Data
@using BoatBookingApp.Frontend.Shared.Services

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h4" GutterBottom="true">Boat Booking</MudText>

    <MudForm @ref="form" @bind-IsValid="@isFormValid">
        <MudSelect T="string" Label="Speedboat Name" @bind-Value="booking.BoatName" Required="true" Class="wide-select">
            @foreach (var boat in boats)
            {
                <MudSelectItem Value="@boat.Name">@boat.Name</MudSelectItem>
            }
        </MudSelect>

        <MudSwitch T="bool" @bind-Checked="booking.IsMultiDay" ValueChanged="OnMultiDayChanged"
                   Color="Color.Primary" Label="Multiple Days Rent" Class="my-custom-switch" />

        <MudDatePicker Label="Start Date" @bind-Date="booking.StartDate" Required="true" />
        @if (booking.IsMultiDay)
        {
            <MudDatePicker Label="End Date" @bind-Date="booking.EndDate" Required="true" />
        }

        <MudNumericField @bind-Value="booking.PassengerCount" Label="Number of Passengers" Min="1" Required="true" />

        <MudTimePicker Label="Pickup Time" @bind-Time="booking.PickupTime" Required="true" />
        <MudTimePicker Label="Return Time" @bind-Time="booking.ReturnTime" Required="true" />

        <MudSwitch T="bool" @bind-Checked="booking.SkipperRequired" ValueChanged="OnSkipperRequiredChanged"
                   Color="Color.Primary" Label="Skipper Required" Class="my-custom-switch" />
        <MudSwitch T="bool" @bind-Checked="booking.FuelIncluded" ValueChanged="OnFuelIncludedChanged"
                   Color="Color.Primary" Label="Fuel Included" Class="my-custom-switch" />

        <MudSelect T="int?" Label="Departure Location" @bind-Value="selectedDepartureLocationId" Required="false" Class="wide-select"
                   ToStringFunc="@(id => id == null ? "Custom" : locations.FirstOrDefault(l => l.Id == id)?.Name ?? "")">
            <MudSelectItem Value="@((int?)null)">Custom</MudSelectItem>
            @foreach (var location in locations)
            {
                <MudSelectItem Value="@((int?)location.Id)">@location.Name</MudSelectItem>
            }
        </MudSelect>
        @if (selectedDepartureLocationId == null)
        {
            <MudGrid>
                <MudItem xs="6">
                    <MudTextField Label="Custom Departure Location" @bind-Value="booking.CustomDepartureLocation" Required="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField Label="Custom Departure Name" @bind-Value="booking.CustomDepartureLocationName" Required="true" />
                </MudItem>
            </MudGrid>
        }

        <MudSelect T="Extra" Label="Extras" MultiSelection="true" ToStringFunc="@(e => e.Name)"
                   SelectedValues="_selectedExtras" SelectedValuesChanged="OnSelectedExtrasChanged">
            @foreach (var extra in extras)
            {
                <MudSelectItem Value="@extra">@extra.Name</MudSelectItem>
            }
        </MudSelect>

        <MudGrid>
            <MudItem xs="4">
                <MudTextField Label="Renter Name" @bind-Value="booking.RenterName" Required="true" />
            </MudItem>
            <MudItem xs="4">
                <MudTextField Label="Renter Email" @bind-Value="booking.RenterEmail" Required="true" InputType="InputType.Email" />
            </MudItem>
            <MudItem xs="4">
                <MudTextField Label="Renter Phone" @bind-Value="booking.RenterPhone" Required="true" InputType="InputType.Telephone" />
            </MudItem>
        </MudGrid>

        <MudNumericField @bind-Value="booking.TotalPrice" Label="Total Price" Min="0" Required="true" />
        <MudNumericField @bind-Value="booking.DepositPaid" Label="Deposit Paid" Min="0" Required="true" />

        <MudCheckBox T="bool" @bind-Checked="generateDocument" ValueChanged="OnGenerateDocumentChanged" Label="Generate Confirmation Document" />

        <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" Style="@(isLoading ? "display: block; margin: 20px auto;" : "display: none;")" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!isFormValid)" OnClick="Submit" Class="mt-4">Send Booking</MudButton>
    </MudForm>
</MudContainer>

@code {
    [Inject]
    public IDbContextFactory<BoatBookingContext> DbContextFactory { get; set; }
    [Inject]
    public ISnackbar Snackbar { get; set; }
    [Inject]
    public BookerStateService BookerState { get; set; }
    [Inject]
    public GoogleSheetsService GoogleSheetsService { get; set; }
    [Inject]
    public DocumentGenerationService DocumentGenerationService { get; set; }

    private MudForm? form;
    private bool isFormValid;
    private BoatBooking booking = new BoatBooking
        {
            StartDate = DateTime.Today,
            EndDate = DateTime.Today,
            IsMultiDay = false,
            BookingExtras = new List<BookingExtra>()
        };
    private List<Boat> boats = new List<Boat>();
    private List<Extra> extras = new List<Extra>();
    private List<Location> locations = new List<Location>();
    private IEnumerable<Extra> _selectedExtras = new List<Extra>();
    private int? selectedDepartureLocationId;
    private bool isLoading = false;
    private bool generateDocument = false;

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = DbContextFactory.CreateDbContext();
        boats = await dbContext.Boats.AsNoTracking().ToListAsync();
        extras = await dbContext.Extras.AsNoTracking().ToListAsync();
        locations = await dbContext.Locations.AsNoTracking().ToListAsync();

        // Postavi defaultnu lokaciju "Hvar Port" ako postoji
        var hvarPort = locations.FirstOrDefault(l => l.Name == "Hvar Port");
        if (hvarPort != null)
        {
            selectedDepartureLocationId = hvarPort.Id;
            booking.DepartureLocationId = hvarPort.Id;
        }
    }

    private void OnSelectedExtrasChanged(IEnumerable<Extra> newValue)
    {
        _selectedExtras = newValue;
        booking.BookingExtras = newValue.Select(e => new BookingExtra { ExtraId = e.Id }).ToList();
    }

    private void OnMultiDayChanged(bool value)
    {
        booking.IsMultiDay = value;
        if (!value)
        {
            booking.EndDate = null;
        }
        StateHasChanged();
    }

    private void OnSkipperRequiredChanged(bool value)
    {
        booking.SkipperRequired = value;
        Console.WriteLine($"SkipperRequired changed to: {value}");
    }

    private void OnFuelIncludedChanged(bool value)
    {
        booking.FuelIncluded = value;
        Console.WriteLine($"FuelIncluded changed to: {value}");
    }

    private void OnGenerateDocumentChanged(bool value)
    {
        generateDocument = value;
        Console.WriteLine($"GenerateDocument changed to: {value}");
    }

    private async Task Submit()
    {
        try
        {
            isLoading = true;
            StateHasChanged(); // Prikazati spinner

            using var dbContext = DbContextFactory.CreateDbContext();
            var selectedBooker = await dbContext.Bookers
                .AsNoTracking()
                .FirstOrDefaultAsync(b => b.ShortName == BookerState.SelectedBookerShortName);
            if (selectedBooker != null)
            {
                booking.BookerId = selectedBooker.Id;
            }

            booking.DepartureLocationId = selectedDepartureLocationId;
            if (selectedDepartureLocationId == null)
            {
                booking.CustomDepartureLocation = booking.CustomDepartureLocation?.Trim() ?? string.Empty;
                booking.CustomDepartureLocationName = booking.CustomDepartureLocationName ?? string.Empty;
            }
            else
            {
                booking.CustomDepartureLocation = null;
                booking.CustomDepartureLocationName = null;
            }

            dbContext.BoatBookings.Add(booking);
            await dbContext.SaveChangesAsync();

            // Upis u Google Sheet
            string shortName = BookerState.SelectedBookerShortName ?? "N/A";
            if (booking.IsMultiDay && booking.EndDate.HasValue)
            {
                for (var date = booking.StartDate.Value; date <= booking.EndDate.Value; date = date.AddDays(1))
                {
                    await GoogleSheetsService.UpdateGoogleSheet(date, null, null, booking.PassengerCount, booking.PickupTime, shortName, booking.BoatName, booking.SkipperRequired);
                    bool isFirstDay = date == booking.StartDate.Value;
                    await GoogleSheetsService.UpdateEvidenceSheet(booking, null, null, shortName, date, _selectedExtras, isFirstDay);
                }
            }
            else
            {
                await GoogleSheetsService.UpdateGoogleSheet(booking.StartDate.Value, null, null, booking.PassengerCount, booking.PickupTime, shortName, booking.BoatName, booking.SkipperRequired);
                await GoogleSheetsService.UpdateEvidenceSheet(booking, null, null, shortName, booking.StartDate.Value, _selectedExtras, true);
            }

            // Generiranje dokumenta ako je označeno
            string generatedPaths = "";
            if (generateDocument)
            {
                string templatePath = booking.DepartureLocationId == 1
                    ? Path.Combine("wwwroot", "templates", "BookingConfirmation_BoatHvar_Template.docx")
                    : Path.Combine("wwwroot", "templates", "BookingConfirmation_Boat_Template.docx");
                string baseFileName = $"BookingConfirmation_{booking.Id}_{DateTime.Now:yyyyMMdd_HHmmss}";
                string startDateStr = booking.StartDate?.ToString("dd-MM-yyyy") ?? "N/A";
                string renterName = booking.RenterName?.Replace(" ", "_") ?? "Guest";
                string subFolderName = $"{booking.Id}_Boat_{booking.BoatName}_{startDateStr}_{renterName}";

                string basePath;
                try
                {
                    basePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "OneDrive", "BumbarRent", "Booking_confrmations", "2025");
                    string subFolderPath = Path.Combine(basePath, subFolderName);
                    Directory.CreateDirectory(subFolderPath);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Failed to save to OneDrive: {ex.Message}, falling back to MyDocuments");
                    basePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "BumbarRent", "Booking_confrmations", "2025");
                    string subFolderPath = Path.Combine(basePath, subFolderName);
                    Directory.CreateDirectory(subFolderPath);
                }

                string fileName = $"{baseFileName}.docx";
                string outputPath = Path.Combine(basePath, subFolderName, fileName);

                string pickUpMapLink = booking.DepartureLocationId.HasValue
                    ? locations.FirstOrDefault(l => l.Id == booking.DepartureLocationId)?.Link?.Trim() ?? ""
                    : booking.CustomDepartureLocation?.Trim() ?? "";
                DocumentGenerationService.GenerateBoatBookingDocument(booking, pickUpMapLink, _selectedExtras, templatePath, outputPath);

                generatedPaths = $"Document generated at: {outputPath}";
            }

            // Resetiranje forme nakon uspješnog slanja
            booking = new BoatBooking
                {
                    StartDate = DateTime.Today,
                    EndDate = DateTime.Today,
                    IsMultiDay = false,
                    BookingExtras = new List<BookingExtra>()
                };
            _selectedExtras = new List<Extra>();
            generateDocument = false;
            form?.ResetValidation();
            isLoading = false;
            StateHasChanged();

            // Ponovno postavi defaultnu lokaciju "Hvar Port"
            var hvarPort = locations.FirstOrDefault(l => l.Name == "Hvar Port");
            if (hvarPort != null)
            {
                selectedDepartureLocationId = hvarPort.Id;
                booking.DepartureLocationId = hvarPort.Id;
            }

            Snackbar.Add("Boat booking saved and sheets updated." + (generateDocument ? $"\n{generatedPaths}" : ""), Severity.Success);
        }
        catch (Exception ex)
        {
            isLoading = false;
            StateHasChanged();
            Snackbar.Add($"Sent Error: {ex.Message}", Severity.Error);
        }
    }
}

<style>
    .wide-select {
        width: 300px;
    }

        .wide-select .mud-input-control {
            width: 300px;
        }
</style>