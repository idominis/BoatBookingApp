@page "/transfer-booking"
@using Microsoft.EntityFrameworkCore
@using BoatBookingApp.Frontend.Shared.Models
@using MudBlazor
@using BoatBookingApp.Frontend.Shared.Data
@using BoatBookingApp.Frontend.Shared.Services

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h4" GutterBottom="true">Transfer Booking</MudText>

    <MudForm @ref="form" @bind-IsValid="@isFormValid">
        <MudSwitch T="bool" Value="withReTour" ValueChanged="OnWithReTourChanged"
                   Color="MudBlazor.Color.Primary" Label="With ReTour" Class="my-custom-switch" />

        <MudDatePicker Label="Departure Date" @bind-Date="booking.DepartureDate" Required="true" />
        <MudTimePicker Label="Departure Time" @bind-Time="booking.DepartureTime" Required="true" />

        @if (withReTour)
        {
            <MudDatePicker Label="ReTour Date" @bind-Date="booking.ReTourDate" Required="true" />
            <MudTimePicker Label="ReTour Time" @bind-Time="booking.ReTourTime" Required="true" />
        }

        <MudSelect T="int?" Label="Departure Location" @bind-Value="selectedDepartureLocationId" Required="false" Class="wide-select"
                   ToStringFunc="@(id => id == null ? "Custom" : locations.FirstOrDefault(l => l.Id == id)?.Name ?? "")">
            <MudSelectItem Value="@((int?)null)">Custom</MudSelectItem>
            @foreach (var location in locations)
            {
                <MudSelectItem Value="@((int?)location.Id)">@location.Name</MudSelectItem>
            }
        </MudSelect>
        @if (selectedDepartureLocationId == null)
        {
            <MudGrid>
                <MudItem xs="6">
                    <MudTextField Label="Custom Departure Location" @bind-Value="booking.CustomDepartureLocation" Required="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField Label="Custom Departure Name" @bind-Value="booking.CustomDepartureLocationName" Required="true" />
                </MudItem>
            </MudGrid>
        }

        <MudSelect T="int?" Label="Arrival Location" @bind-Value="selectedArrivalLocationId" Required="false" Class="wide-select"
                   ToStringFunc="@(id => id == null ? "Custom" : locations.FirstOrDefault(l => l.Id == id)?.Name ?? "")">
            <MudSelectItem Value="@((int?)null)">Custom</MudSelectItem>
            @foreach (var location in locations)
            {
                <MudSelectItem Value="@((int?)location.Id)">@location.Name</MudSelectItem>
            }
        </MudSelect>
        @if (selectedArrivalLocationId == null)
        {
            <MudGrid>
                <MudItem xs="6">
                    <MudTextField Label="Custom Arrival Location" @bind-Value="booking.CustomArrivalLocation" Required="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField Label="Custom Arrival Name" @bind-Value="booking.CustomArrivalLocationName" Required="true" />
                </MudItem>
            </MudGrid>
        }

        <MudNumericField @bind-Value="booking.PassengerCount" Label="Number of Passengers" Min="1" Required="true" />

        <MudSwitch T="bool" Value="luggage" ValueChanged="OnLuggageChanged"
                   Color="MudBlazor.Color.Primary" Label="Luggage" Class="my-custom-switch" />

        <MudSwitch T="bool" Value="fuelIncluded" ValueChanged="OnFuelIncludedChanged"
                   Color="MudBlazor.Color.Primary" Label="Fuel Included" Class="my-custom-switch" />

        <MudGrid>
            <MudItem xs="4">
                <MudTextField Label="Renter Name" @bind-Value="booking.RenterName" Required="true" />
            </MudItem>
            <MudItem xs="4">
                <MudTextField Label="Renter Email" @bind-Value="booking.RenterEmail" Required="true" InputType="InputType.Email" />
            </MudItem>
            <MudItem xs="4">
                <MudTextField Label="Renter Phone" @bind-Value="booking.RenterPhone" Required="true" InputType="InputType.Telephone" />
            </MudItem>
        </MudGrid>

        <MudNumericField @bind-Value="booking.TotalPrice" Label="Total Price" Min="0" Required="true" />
        <MudNumericField @bind-Value="booking.DepositPaid" Label="Deposit Paid" Min="0" Required="true" />

        <MudCheckBox T="bool" @bind-Checked="generateDocument" ValueChanged="OnGenerateDocumentChanged" Label="Generate Confirmation Document" />

        <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" Style="@(isLoading ? "display: block; margin: 20px auto;" : "display: none;")" />
        <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Disabled="@(!isFormValid)" OnClick="Submit" Class="mt-4">Send Booking</MudButton>
    </MudForm>
</MudContainer>

@code {
    [Inject]
    public IDbContextFactory<BoatBookingContext> DbContextFactory { get; set; }
    [Inject]
    public ISnackbar Snackbar { get; set; }
    [Inject]
    public BookerStateService BookerState { get; set; }
    [Inject]
    public GoogleSheetsService GoogleSheetsService { get; set; }
    [Inject]
    public DocumentGenerationService DocumentGenerationService { get; set; }

    private MudForm? form;
    private bool isFormValid;
    private TransferBooking booking;

    private bool withReTour = false;
    private bool luggage = true;
    private bool fuelIncluded = true;
    private bool generateDocument = false;
    private bool isLoading = false;
    private List<Location> locations = new List<Location>();
    private int? selectedDepartureLocationId;
    private int? selectedArrivalLocationId;

    protected override async Task OnInitializedAsync()
    {
        booking = new TransferBooking
            {
                WithReTour = withReTour,
                Luggage = luggage,
                FuelIncluded = fuelIncluded
            };

        using var dbContext = DbContextFactory.CreateDbContext();
        locations = await dbContext.Locations.AsNoTracking().ToListAsync();
    }

    private void OnWithReTourChanged(bool value)
    {
        withReTour = value;
        booking.WithReTour = value;
        if (!value)
        {
            booking.ReTourDate = null;
            booking.ReTourTime = null;
        }
        StateHasChanged();
        Console.WriteLine($"WithReTour changed to: {value}");
    }

    private void OnLuggageChanged(bool value)
    {
        luggage = value;
        booking.Luggage = value;
        Console.WriteLine($"Luggage changed to: {value}");
    }

    private void OnFuelIncludedChanged(bool value)
    {
        fuelIncluded = value;
        booking.FuelIncluded = value;
        Console.WriteLine($"FuelIncluded changed to: {value}");
    }

    private void OnGenerateDocumentChanged(bool value)
    {
        generateDocument = value;
        Console.WriteLine($"GenerateDocument changed to: {value}");
    }

    private async Task Submit()
    {
        try
        {
            isLoading = true;
            StateHasChanged(); // Prikazati MudProgressCircular

            using var dbContext = DbContextFactory.CreateDbContext();
            var selectedBooker = await dbContext.Bookers
            .AsNoTracking()
            .FirstOrDefaultAsync(b => b.ShortName == BookerState.SelectedBookerShortName);
            if (selectedBooker != null)
            {
                booking.BookerId = selectedBooker.Id;
            }

            booking.DepartureLocationId = selectedDepartureLocationId;
            if (selectedDepartureLocationId == null)
            {
                booking.CustomDepartureLocation = booking.CustomDepartureLocation ?? string.Empty;
                booking.CustomDepartureLocationName = booking.CustomDepartureLocationName ?? string.Empty;
            }
            else
            {
                booking.CustomDepartureLocation = null;
                booking.CustomDepartureLocationName = null;
            }

            booking.ArrivalLocationId = selectedArrivalLocationId;
            if (selectedArrivalLocationId == null)
            {
                booking.CustomArrivalLocation = booking.CustomArrivalLocation ?? string.Empty;
                booking.CustomArrivalLocationName = booking.CustomArrivalLocationName ?? string.Empty;
            }
            else
            {
                booking.CustomArrivalLocation = null;
                booking.CustomArrivalLocationName = null;
            }

            dbContext.TransferBookings.Add(booking);
            await dbContext.SaveChangesAsync();

            Console.WriteLine($"Submit - generateDocument value: {generateDocument}");
            if (generateDocument)
            {
                // Dohvati podatke za Google Sheet i Word dokument
                string pickUpLocation = selectedDepartureLocationId.HasValue
                ? locations.FirstOrDefault(l => l.Id == selectedDepartureLocationId)?.Name ?? "N/A"
                : booking.CustomDepartureLocationName ?? "N/A";
                string dropOffLocation = selectedArrivalLocationId.HasValue
                ? locations.FirstOrDefault(l => l.Id == selectedArrivalLocationId)?.Name ?? "N/A"
                : booking.CustomArrivalLocationName ?? "N/A";
                string shortName = BookerState.SelectedBookerShortName ?? "N/A";
                string pickUpMapLink = selectedDepartureLocationId.HasValue
                ? locations.FirstOrDefault(l => l.Id == selectedDepartureLocationId)?.Link ?? "N/A"
                : booking.CustomDepartureLocation ?? "N/A";
                string dropOffMapLink = selectedArrivalLocationId.HasValue
                ? locations.FirstOrDefault(l => l.Id == selectedArrivalLocationId)?.Link ?? "N/A"
                : booking.CustomArrivalLocation ?? "N/A";

                // Upis u Google Sheet (oba lista)
                await GoogleSheetsService.UpdateGoogleSheet(booking.DepartureDate.Value, pickUpLocation, dropOffLocation, booking.PassengerCount, booking.DepartureTime, shortName);
                await GoogleSheetsService.UpdateEvidenceSheet(booking, pickUpLocation, dropOffLocation, shortName, false); // Tour
                if (withReTour)
                {
                    await GoogleSheetsService.UpdateGoogleSheet(booking.ReTourDate.Value, dropOffLocation, pickUpLocation, booking.PassengerCount, booking.ReTourTime, shortName);
                    await GoogleSheetsService.UpdateEvidenceSheet(booking, pickUpLocation, dropOffLocation, shortName, true); // ReTour
                }

                // Generiranje dokumenata
                string templatePath = Path.Combine("wwwroot", "templates", "BookingConfirmationTemplate.docx");
                string baseFileName = $"BookingConfirmation_{booking.Id}{DateTime.Now:yyyyMMdd_HHmmss}";
                string departureDateStr = booking.DepartureDate?.ToString("dd-MM-yyyy") ?? "N/A";
                string renterName = booking.RenterName?.Replace(" ", "") ?? "Guest";
                string subFolderName = $"{booking.Id}_Transfer_{pickUpLocation}-{dropOffLocation}_{departureDateStr}_{renterName}";

                string basePath;
                try
                {
                    basePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "OneDrive", "BumbarRent", "Booking_confrmations", "2025");
                    string subFolderPath = Path.Combine(basePath, subFolderName);
                    Directory.CreateDirectory(subFolderPath);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Failed to save to OneDrive: {ex.Message}, falling back to MyDocuments");
                    basePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "BumbarRent", "Booking_confrmations", "2025");
                    string subFolderPath = Path.Combine(basePath, subFolderName);
                    Directory.CreateDirectory(subFolderPath);
                }

                // Generiranje Tour dokumenta
                string tourFileName = $"{baseFileName}_Tour.docx";
                string tourOutputPath = Path.Combine(basePath, subFolderName, tourFileName);
                DocumentGenerationService.GenerateDocument(booking, pickUpLocation, dropOffLocation, pickUpMapLink, dropOffMapLink, locations, templatePath, tourOutputPath);

                // Generiranje ReTour dokumenta ako je withReTour uključen
                string generatedPaths = $"Tour document generated at: {tourOutputPath}";
                if (withReTour)
                {
                    string reTourFileName = $"{baseFileName}_ReTour.docx";
                    string reTourOutputPath = Path.Combine(basePath, subFolderName, reTourFileName);

                    // Kreiraj kopiju booking objekta s ReTour podacima
                    var reTourBooking = new TransferBooking
                        {
                            RenterName = booking.RenterName,
                            RenterPhone = booking.RenterPhone,
                            RenterEmail = booking.RenterEmail,
                            DepartureDate = booking.ReTourDate,
                            DepartureTime = booking.ReTourTime,
                            PassengerCount = booking.PassengerCount,
                            Luggage = booking.Luggage,
                            FuelIncluded = booking.FuelIncluded,
                            TotalPrice = booking.TotalPrice,
                            DepositPaid = booking.DepositPaid
                        };

                    DocumentGenerationService.GenerateDocument(reTourBooking, dropOffLocation, pickUpLocation, dropOffMapLink, pickUpMapLink, locations, templatePath, reTourOutputPath);
                    generatedPaths += $"\nReTour document generated at: {reTourOutputPath}";
                }

                // Resetiranje forme nakon uspješnog slanja
                booking = new TransferBooking
                    {
                        WithReTour = false,
                        Luggage = true,
                        FuelIncluded = true
                    };
                withReTour = false;
                luggage = true;
                fuelIncluded = true;
                generateDocument = false;
                selectedDepartureLocationId = null;
                selectedArrivalLocationId = null;
                form?.ResetValidation(); // Resetiraj validaciju forme
                isLoading = false;
                StateHasChanged(); // Ažuriraj UI za sakrivanje spinners i reset forme

                Snackbar.Add($"Booking saved, sheets (2025 and Evidencija) updated, and documents generated:\n{generatedPaths}", Severity.Info);
                Snackbar.Add("Sent Successfully!", Severity.Success);
            }
            else
            {
                // Resetiranje forme nakon uspješnog slanja bez dokumenata
                booking = new TransferBooking
                    {
                        WithReTour = false,
                        Luggage = true,
                        FuelIncluded = true
                    };
                withReTour = false;
                luggage = true;
                fuelIncluded = true;
                generateDocument = false;
                selectedDepartureLocationId = null;
                selectedArrivalLocationId = null;
                form?.ResetValidation(); // Resetiraj validaciju forme
                isLoading = false;
                StateHasChanged(); // Ažuriraj UI za sakrivanje spinners i reset forme

                Snackbar.Add("Sent Successfully!", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            isLoading = false;
            StateHasChanged(); // Sakriti MudProgressCircular u slučaju greške
            Console.WriteLine($"Greška u Submit: {ex.Message}, InnerException: {ex.InnerException?.Message}");
            Snackbar.Add($"Sent Error: {ex.Message}, Inner: {ex.InnerException?.Message}", Severity.Error);
        }
    }
}